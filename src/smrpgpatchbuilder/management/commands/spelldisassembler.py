from django.core.management.base import BaseCommand
from randomizer.management.disassembler_common import (
    shortify,
    bit,
    dbyte,
    hbyte,
    named,
    con,
    byte,
    byte_int,
    short,
    short_int,
    build_table,
    use_table_name,
    get_flag_string,
    flags,
    con_int,
    flags_short,
    writeline,
    bit_bool_from_num,
)


class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument("-r", "--rom", dest="rom", help="Path to a Mario RPG rom")

        parser.add_argument(
            "-d",
            "--debug",
            action="store_true",
            help="If set, dumps to a gitignored folder instead of overwriting the scripts sourced by SMRPG Randomizer",
        )

    def handle(self, *args, **options):
        debug = options["debug"]

        dest = "randomizer/data"
        if debug:
            dest = "randomizer/management/commands/output/disassembler"

        global rom
        rom = bytearray(open(options["rom"], "rb").read())

        file = open("%s/spells_list.py" % dest, "w")
        writeline(file, "# AUTOGENERATED DO NOT EDIT!!")
        writeline(file, "# Run the following command if you need to rebuild the table")
        writeline(file, "# python manage.py spelldisassembler --rom ROM")
        for index in range(0, 128):
            writeline(file, "    %i" % index)

            offset = (index * 12) + 0x3A20F1

            tmp = rom[offset]
            writeline(file, "    check_stats = %r" % ((tmp & 0x01) == 0x01))
            writeline(file, "    ignore_defense = %r" % ((tmp & 0x02) == 0x02))
            writeline(file, "    check_ohko = %r" % ((tmp & 0x20) == 0x20))
            writeline(
                file, "    usable_outside_of_battle = %r" % ((tmp & 0x80) == 0x80)
            )

            offset += 1

            tmp = rom[offset]
            spelltype = (tmp & 0x01) == 0x01
            writeline(
                file,
                "    spell_type = %s"
                % ("SpellType.Damage" if not spelltype else "SpellType.Heal"),
            )
            effecttype = tmp & 0x06
            if effecttype == 2:
                writeline(file, "    effect_type = EffectType.Inflict")
            elif effecttype == 4:
                writeline(file, "    effect_type = EffectType.Nullify")
            else:
                writeline(file, "    effect_type = None")
            writeline(file, "    quad9s = %r" % ((tmp & 0x08) == 0x08))

            offset += 2
            tmp = rom[offset]

            writeline(file, "    target_others = %r" % ((tmp & 2) == 2))
            writeline(file, "    target_enemies = %r" % ((tmp & 4) == 4))
            writeline(file, "    target_party = %r" % ((tmp & 16) == 16))
            writeline(file, "    target_wounded = %r" % ((tmp & 32) == 32))
            writeline(file, "    target_one_party = %r" % ((tmp & 64) == 64))
            writeline(file, "    target_not_self = %r" % ((tmp & 128) == 128))

            offset += 1
            tmp = rom[offset]
            el = tmp & 0xF0
            if el == 0x10:
                writeline(file, "    element = Element.ICE")
            elif el == 0x20:
                writeline(file, "    element = Element.THUNDER")
            elif el == 0x40:
                writeline(file, "    element = Element.FIRE")
            elif el == 0x80:
                writeline(file, "    element = Element.JUMP")
            else:
                writeline(file, "    element = None")

            offset += 3
            tmp = rom[offset]

            status_effects = []
            for i in range(0, 8):
                if tmp & (2**i) == 2**i:
                    status_effects.append(i)
            writeline(file, "    status_effects = %r" % status_effects)

            offset += 1
            tmp = rom[offset]

            boosts = []
            for i in range(3, 7):
                if tmp & (2**i) == 2**i:
                    boosts.append(i)
            writeline(file, "    boosts = %r" % boosts)

            offset += 2
            tmp = rom[offset]
            if tmp == 0:
                writeline(file, "    inflict = InflictFunction.Scan")
            elif tmp == 1:
                writeline(file, "    inflict = InflictFunction.Miss")
            elif tmp == 2:
                writeline(file, "    inflict = InflictFunction.NoDmg")
            elif tmp == 3:
                writeline(file, "    inflict = InflictFunction.Revive")
            elif tmp == 4:
                writeline(file, "    inflict = InflictFunction.IncJump")
            else:
                writeline(file, "    inflict = None")

            offset += 1
            tmp = rom[offset]
            writeline(file, "    hide_num = %r" % (rom[offset] == 4))

            if index < 32:
                offset = index * 2 + 0x02CACE
                tmg = rom[offset] + (rom[offset + 1] << 8)
                writeline(file, "    timingModifiers = 0x%04x" % tmg)
                offset = index * 2 + 0x02D05B
                tmg = rom[offset] + (rom[offset + 1] << 8)
                writeline(file, "    damageModifiers = 0x%04x" % tmg)

            writeline(file, "    \n\n")

        file.close()
